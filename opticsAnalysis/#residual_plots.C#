_fit, double b0_fit, double b1_fit, double b2_fit, double b3_fit, double b4_fit, double b5_fit, const TString& hole_id)

//residual_plots(0.39599611, 0.0, -0.00117428316, 2.64034628, 0.000000931996937, -0.00453834236, 3.89587196, "11")

//residual_plots(0.17445783, 0.0, -0.000352099262, -0.0247428059, 0.00000025813027, -0.0014249449, 6.57310773)

void residual_plots(double a_fit, double b0_fit, double b1_fit, double b2_fit, double b3_fit, double b4_fit, double b5_fit)
{
  ROOT::EnableImplicitMT(2);
  using namespace ROOT::RDF;

  //Assigning variables for fit coefficients.
  auto a = a_fit;
  auto b0 = b0_fit;
  auto b1 = b1_fit;
  auto b2 = b2_fit;
  auto b3 = b3_fit;
  auto b4 = b4_fit;
  auto b5 = b5_fit;

  auto datafile = "opticsAnalysis/opticsMatrix/output/output/sieveHole_p3_11.csv";

  //Create a Root DataFrame that will read from a CSV file.
  auto df = ROOT::RDF::MakeCsvDataFrame(datafile);

  //Create new DataFrame that includes a new column. This new column will contain the target theta predicted by the fit.
  //I had wanted to put fit coefficient variables in here, but something about the way the Define function works doesn't like variables that aren't column names. I should figure this out for later versions of the script.

  //Define formula to calculate predicted theta from fit.
  auto res_formula = [a, b0, b1, b2, b3, b4, b5] (double r, double rp) {return a + (b1 * r) + (b2 * rp) + (b3 * (r * r)) + (b4 * r * rp) + (b5 * (rp * rp)); };
  //Create new column with predicted theta.
  auto df_with_fit = df.Define("tg_th_pred", res_formula, {"gem1_r", "gem1_rp"});

  //Create a column for residual values. This takes the target theta predicted by the fit and compares it to the target theta measures at the sieve in the simulation.
  auto df_with_resid = df_with_fit.Define("residuals_th", "tg_th_pred-tg_th");

  //Create a column for the square of the residuals.
  auto df_resid_sqr = df_with_fit.Define("residuals_th_sq","(tg_th_pred-tg_th)*(tg_th_pred-tg_th)");

  //Get the sum of the squares. This is also the variable u.
  double resid_th_sum = *(double*)df_resid_sqr.Sum("residuals_th_sq").GetPtr();

  //Generate doubles that correspond to the maximum and minimum values in certain comlumns. These can be used later to define axis ranges.
  //Define max and min for radial position at GEM1 plane.
  double rMax_d = *(double*)df_with_resid.Max("gem1_r").GetPtr();
  double rMin_d = *(double*)df_with_resid.Min("gem1_r").GetPtr();

  //Define max and min for sieve theta residuals.
  double residMax_d = *(double*)df_with_resid.Max("residuals_th").GetPtr();
  double residMin_d = *(double*)df_with_resid.Min("residuals_th").GetPtr();

  //Get the average residual value.
  double resid_th_avg = *(double*)df_with_resid.Mean("residuals_th").GetPtr();

  //Get average value of target theta.
  double tg_th_avg = *(double*)df_resid_sqr.Mean("tg_th").GetPtr();


  auto v_formula = [tg_th_avg] (double tg_th) {return (tg_th-tg_th_avg)*(tg_th-tg_th_avg); };
  
  //Define new dataframe with column for which the sum is a variable needed to find residual value for each hole.
  auto df_resid = df_resid_sqr.Define("tg_th_v", v_formula, {"tg_th"});

  //Generate variable v for residual value.
  double resid_v = *(double*)df_resid.Sum("tg_th_v").GetPtr();

  //Calculate residual value via R=1-u/v where u and v are calculated above.
  double Res = 1-(resid_th_sum/resid_v);

  //Create a flat line to compare residuals to. The range in x is set based on the size of the canvas. The line should be as wide in x as the range of the radial position of hits on the GEM1 plane.
  //Double_t plotLineX[2] = {rMin_d, rMax_d};
  //Double_t plotLineY[2] = {0.0, 0.0};
  //auto line = new TGraph(2, plotLineX, plotLineY);
  //line -> SetLineColor(kBlue);
  //line -> SetLineWidth(3);

  //----2D Histograms----
  //auto pred_hist = df.Histo2D({"pred_hist","Predicted target theta [rad] vs measured radius [mm] at GEM1 detector plane", 100, 300, 1400, 50, 0, 30}, "gem1_r", "tg_th_pred");
  //auto true_hist = df.Histo2D({"true_hist","Measured target theta [rad] vs measured radius [mm] at GEM1 detector plane", 100, 300, 1400, 50, 0, 30}, "gem1_r", "tg_th");

  //----TGraphs----
  //Plot radius [mm] at gem1 plane vs. predected target theta at sieve.
  auto pred_tgraph = df_with_resid.Graph("gem1_r","tg_th_pred");
  //Sets markers to be blue.
  pred_tgraph -> SetMarkerColorAlpha(kBlue, 1);
  //Set marker style to 7 - medium filled in circle.
  pred_tgraph -> SetMarkerStyle(7);
  //Currently pred_tgraph is not a TGraph but a ROOT::RDF::RResultPtr<TGraph>. We can use a smart pointer, GetPtr, to access the TGraph.
  auto pred_tgraph_ptr = pred_tgraph.GetPtr();

  //Plot radius [mm] at gem1 plane vs. measured target theta at sieve.
  auto true_tgraph = df_with_resid.Graph("gem1_r","tg_th");
  //Sets markers to be red.
  true_tgraph -> SetMarkerColorAlpha(kRed, 1);
  true_tgraph -> SetMarkerStyle(7);
  auto true_tgraph_ptr = true_tgraph.GetPtr();

  //Plot radius [mm] at gem1 plane vs. target theta residuals.
  auto residuals_tgraph = df_with_resid.Graph("gem1_r","residuals_th");
  residuals_tgraph -> SetMarkerColorAlpha(kRed, 1);
  residuals_tgraph -> SetMarkerStyle(7);
  auto residuals_tgraph_ptr = residuals_tgraph.GetPtr();

  //----TProfile - don't really understand yet----
  //auto pred_prof = df.Profile2D({"profName", "profTitle", 40, -4, 4, 40, -4, 4, 0, 20}, "xValues", "yValues", "zValues", "weight");
  //auto true_prof = df.Profile2D({"profName", "profTitle", 40, -4, 4, 40, -4, 4, 0, 20}, "xValues", "yValues", "zValues", "weight");

//------------------------------------------------------------------------------

  //----Draw and save TGraphs----


  //Define canvas to draw graphs on.
  auto graphC = new TCanvas();
  //Make a multiGraph that will hold both plots.
  auto multigraphC = new TMultiGraph();
  //Add each plot to the multigraph and draw. A = axis drawn P = marker is plotted at each point
  multigraphC -> Add(pred_tgraph_ptr);
  multigraphC -> Add(true_tgraph_ptr);
  multigraphC -> Draw("AP");
  //Set title of the graph.
  multigraphC -> SetTitle("True (red) and predected (blue) values for target theta vs GEM1 radius");
  //Changed title, so update gPad on which canvas is made.
  gPad -> Modified();
  gPad -> Update();
  //Set x and y axis titles.
  multigraphC -> GetXaxis() -> SetTitle("Radial position of hits on GEM1 plane [mm]");
  multigraphC -> GetYaxis() -> SetTitle("Theta at sieve plane [radians]");
  gPad -> Modified();
  gPad -> Update();
  //Save canvas as a PDF in "remoll/opticsAnalysis/opticsMatrix/ResidualPlots/"
  graphC->SaveAs("opticsAnalysis/opticsMatrix/ResidualPlots/tg_th_vs_gem1_r_p3_11.pdf");


  //Draw residual plot on canvas and save as pdf.
  auto resid_can = new TCanvas();

  //Set the fitting style. Options are (pcev), where p=1 pronts the probability, c-1 prints the degrees of freedom, e=1 prints the errors (if e=1, v must be 1), and v=1 prints the name/values of parameters.
  gStyle -> SetOptFit(1111);

  auto resid_multi = new TMultiGraph();
  //The two plots on this multiGraph need different options ("L" for the line and "P" for the scatterplot). We can define these separately in the Add function.
  //resid_multi -> Add(line, "L");
  resid_multi -> Add(residuals_tgraph_ptr, "P");
  resid_multi -> Draw("A");

  //Add a first degree polynomial fit to the plot. Q does minimum printing for the fit.
  resid_multi -> Fit("pol1","Q");
  gPad -> Modified();
  gPad -> Update();
  resid_multi -> SetTitle("Sieve Theta Residuals");
  gPad -> Modified();
  gPad -> Update();
  resid_multi -> GetXaxis() -> SetTitle("Radial position of hits on GEM1 plane [mm]");
  //Set limits on the x axis based on the range of the data.
  resid_multi -> GetXaxis() -> SetLimits(rMin_d-2.0, rMax_d+2.0);
  //Create a label on the bottom of the graph that states the average residual value.
  TPaveLabel *Plab0 = new TPaveLabel(0.4, 0.15, 0.88, 0.2, Form("Residual value = %5.4f     Residual sum = %5.8f", Res, resid_th_sum), "NDC");
  Plab0 -> Draw();
  gPad -> Modified();
  gPad -> Update();
  resid_can -> SaveAs("opticsAnalysis/opticsMatrix/ResidualPlots/residuals_th_vs_gem1_r_p3_11.pdf");

}

